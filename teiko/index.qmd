---
title: "Teiko Technical"
author: "Joshua Liddell"
format:
  revealjs: 
    theme: solarized
    scrollable: true
    footer: "View all files on my [Github](//https://github.com/Josh-Liddell/cell-counts)"
    transition: slide
    transition-speed: fast
    # css: styles.css
    # smaller: true
---


## Python Part 1 {.smaller}
Calculating ***relative frequency*** values based on cell counts



```{.python code-line-numbers="4|6-7|9-16|27"}
import pandas as pd

# Reading to dataframe and creating total count col
df = pd.read_csv('cell-count.csv')

populations = ['b_cell', 'cd8_t_cell', 'cd4_t_cell', 'nk_cell', 'monocyte']
df['total_count'] = df[populations].sum(axis=1)

# Reshaping the DataFrame using melt function to organize populations
df2 = pd.melt(
    df,
    id_vars=['sample', 'total_count'],
    value_vars=populations,
    var_name='population',
    value_name='count',)
df2['relative_freq'] = df2['count'] / df2['total_count']

# Sorting the values by the number in the sample column, and then by the population list order
df2 = df2.sort_values(
    by=['sample', 'population'],
    key=lambda col: (
        col.str.extract('(\d+)').astype(int)[0] if col.name == 'sample'
        else col.map({name: i for i, name in enumerate(populations)})
    )
).reset_index(drop=True)

df2.to_csv('output.csv', index=False)
```

## CSV Preview {.smaller}
<br><br>
```{python}
import pandas as pd
import plotly.graph_objects as go

# Reading to dataframe and creating total count col
df = pd.read_csv('cell-count.csv')

populations = ['b_cell', 'cd8_t_cell', 'cd4_t_cell', 'nk_cell', 'monocyte']
df['total_count'] = df[populations].sum(axis=1)

# Reshaping the DataFrame using melt function to organize populations
df2 = pd.melt(
    df,
    id_vars=['sample', 'total_count'],
    value_vars=populations,
    var_name='population',
    value_name='count',)
df2['relative_freq'] = df2['count'] / df2['total_count']

# Sorting the values by the number in the sample column, and then by the population list order
df2 = df2.sort_values(
    by=['sample', 'population'],
    key=lambda col: (
        col.str.extract('(\d+)').astype(int)[0] if col.name == 'sample'
        else col.map({name: i for i, name in enumerate(populations)})
    )
).reset_index(drop=True)

df2.head()
```








## Python Part 2 {.smaller}
<!-- Showing my code for the boxplot -->
This time I included the response column when creating the relative frequencies dataframe
```{.python code-line-numbers="5-7|9-11|13-15"}
import pandas as pd
import plotly.express as px


# Filtering to only treatment tr1 and PBMC samples
df3 = df[(df['treatment'] == 'tr1') & (df['sample_type'] == 'PBMC')]
keeplist = df3['sample'].tolist()

# Creating filtered rel_freq df and dropping unneeded columns
filtered_df = df2[df2['sample'].isin(keeplist)].drop(columns=['total_count', 'count']).reset_index(drop=True)
filtered_df['response'] = filtered_df['response'].replace({'y': 'responder', 'n': 'non-responder'})

# Visualizing the data
fig = px.box(filtered_df, x="population", y="relative_freq", points="all", color='response')
fig.show()
```





## Boxplot {.smaller}
<!-- Sowing the actual boxplot -->
```{python}
import pandas as pd
import plotly.express as px

# Reading to dataframe and creating total count col
df = pd.read_csv('cell-count.csv')

populations = ['b_cell', 'cd8_t_cell', 'cd4_t_cell', 'nk_cell', 'monocyte']
df['total_count'] = df[populations].sum(axis=1)

# Reshaping the DataFrame using melt function to organize populations
df2 = pd.melt(
    df,
    id_vars=['sample', 'total_count', 'response'],
    value_vars=populations,
    var_name='population',
    value_name='count',)
df2['relative_freq'] = df2['count'] / df2['total_count']

# Sorting the values by the number in the sample column, and then by the population list order
df2 = df2.sort_values(
    by=['sample', 'population'],
    key=lambda col: (
        col.str.extract('(\d+)').astype(int)[0] if col.name == 'sample'
        else col.map({name: i for i, name in enumerate(populations)})
    )
).reset_index(drop=True)


df = pd.read_csv('cell-count.csv')

df3 = df[(df['treatment'] == 'tr1') & (df['sample_type'] == 'PBMC')]
keeplist = df3['sample'].tolist()

filtered_df = df2[df2['sample'].isin(keeplist)].drop(columns=['total_count', 'count']).reset_index(drop=True)
filtered_df['response'] = filtered_df['response'].replace({'y': 'responder', 'n': 'non-responder'})

fig = px.box(filtered_df, x="population", y="relative_freq", points="all", color='response')
fig.update_layout(width=1000, height=500)
fig.show()
```





## Insights
::: {.incremental}
- We see that *cd8_t_cell* and *nk_cell* are closely related; however, the distributions of the other cells vary more significantly between responders and non-responders.
- **For example** monocyte non-responder values range between 0.12 and 0.38 rel_freq. Whereas responders for the same population range between 0.04 and 0.13. 
- In the case of b_cell we can see that the values for non-responders cover a much broader range of rel_freq values than the responder values that are clustered much closer together.
:::


 



<!-- #### DATABASE SECTION #### -->

## Database Schema

<iframe 
  src="https://dbdiagram.io/e/67f2fa144f7afba1848b508d/67f2fa1e4f7afba1848b5118"
  style="width: 100%; height: 80%; border: none;"
  allowfullscreen>
</iframe>
<script>
  const iframe = document.querySelector('iframe');
  iframe.addEventListener('load', () => {
    // Trigger a resize event inside the iframe
    iframe.contentWindow.dispatchEvent(new Event('resize'));
  });
</script>


## Database Advantages {.smaller}
It is important to structure the database well especially when we are talking about hundreds of projects, patients, and samples. 

- Multiple samples can be taken from a patient which may or may not be part of the same project. 
- It is possible that a patient could have received several treatments. 

These are things that need to be taken into account when making a database. Designing a database well from the beginning allows operations to be scaled freely without running into critical issues with the data along the way.

I chose to design my database this way because it organizes the data efficiently, ensures data integrity through normalization, and allows for scalable relationships between entities, making future queries and updates easier to manage.





## Query 1
A query to summarize the number of subjects available for each condition.

```{.sql}
SELECT condition_name, COUNT(*) AS [Subjects Available]
FROM conditions c
  JOIN patient p ON c.id = p.condition_id
GROUP BY condition_name
ORDER BY 2 DESC;
```


## Query 2
Returns all melanoma PBMC samples:

- at baseline (time_from_treatment_start is 0) 
- from patients who have treatment tr1.

```{.sql}
SELECT 
FROM samples s
  JOIN patient p ON p.id = s.patient_id
  JOIN conditions c ON c.id = p.condition_id
WHERE condition_name = 'melanoma' 
  AND stype = 'PBMC'
  AND patientid IN (SELECT patientid 
                    FROM patient_treatment 
                    WHERE treatmentid = 'tr1' 
                      AND time_from_treatment_start = 0);
```


## Additional Queries

a. How many samples from each project?
```{.sql}
SELECT project_name, COUNT(*) AS [Count]
FROM samples s
  JOIN project p ON p.id = s.project_id
GROUP BY project_name
ORDER BY 2 DESC;
```

b. How many responders/non-responders?
```{.sql}
SELECT
  COUNT(CASE WHEN response = 'yes' THEN 1 END) AS yes_count,
  COUNT(CASE WHEN response = 'no' THEN 1 END) AS no_count
FROM samples;
```

c. How many males, females?
```{.sql}
SELECT
  COUNT(CASE WHEN sex = 'M' THEN 1 END) AS male_count,
  COUNT(CASE WHEN sex = 'F' THEN 1 END) AS female_count
FROM patient;
```



## Thank you
Fun project!

::: aside
Contact:

541-797-4068

joshua.liddell21@gmail.com
:::