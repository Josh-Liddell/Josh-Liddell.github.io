---
title: "Teiko Technical"
author: "Joshua Liddell"
format:
  revealjs: 
    theme: solarized
    scrollable: false
    footer: "View all files on my [Github](https://github.com/josh-liddell)"
    # df-print: kable
    # css: styles.css
    # smaller: true

---


## Python Part 1 
Converting cell counts to ***relative frequency***
```{.python code-line-numbers="4|6-7|9-16|27"}
import pandas as pd

# Reading to dataframe and creating total count col
df = pd.read_csv('cell-count.csv')

populations = ['b_cell', 'cd8_t_cell', 'cd4_t_cell', 'nk_cell', 'monocyte']
df['total_count'] = df[populations].sum(axis=1)

# Reshaping the DataFrame using melt function to organize populations
df2 = pd.melt(
    df,
    id_vars=['sample', 'total_count'],
    value_vars=populations,
    var_name='population',
    value_name='count',)
df2['relative_freq'] = df2['count'] / df2['total_count']

# Sorting the values by the number in the sample column, and then by the population list order
df2 = df2.sort_values(
    by=['sample', 'population'],
    key=lambda col: (
        col.str.extract('(\d+)').astype(int)[0] if col.name == 'sample'
        else col.map({name: i for i, name in enumerate(populations)})
    )
).reset_index(drop=True)

df2.to_csv('output.csv', index=False)
```



## Output Preview {.smaller}



```{python}
import pandas as pd
import plotly.graph_objects as go

# Reading to dataframe and creating total count col
df = pd.read_csv('cell-count.csv')

populations = ['b_cell', 'cd8_t_cell', 'cd4_t_cell', 'nk_cell', 'monocyte']
df['total_count'] = df[populations].sum(axis=1)

# Reshaping the DataFrame using melt function to organize populations
df2 = pd.melt(
    df,
    id_vars=['sample', 'total_count'],
    value_vars=populations,
    var_name='population',
    value_name='count',)
df2['relative_freq'] = df2['count'] / df2['total_count']

# Sorting the values by the number in the sample column, and then by the population list order
df2 = df2.sort_values(
    by=['sample', 'population'],
    key=lambda col: (
        col.str.extract('(\d+)').astype(int)[0] if col.name == 'sample'
        else col.map({name: i for i, name in enumerate(populations)})
    )
).reset_index(drop=True)

df2.head()
```



## Python Part 2
<!-- Showing my code for the boxplot -->

```{.python}
print("Creating a boxplot here")
```





## Boxplot
<!-- Sowing the actual boxplot -->
B. Which cell populations are significantly different in relative frequencies between responders and non-responders?






<!-- ###########################################
DATABASE SECTION
########################################### -->

## Database Schema




## Database Advantages
What would be some advantages in capturing this information in a database?


## Query 1
Please write a query to summarize the number of subjects available for each condition.




## Query 2
Returns all melanoma PBMC samples at baseline (time_from_treatment_start is 0) from patients who have treatment tr1.



## Additional Queries

a. How many samples from each project

b. How many responders/non-responders

c. How many males, females



## Thank you
Fun project! And thank you for considering me!